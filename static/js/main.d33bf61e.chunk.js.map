{"version":3,"sources":["api/api.js","api/UserList.js","api/User.js","api/Coment.js","api/CommentList.js","api/Post.js","api/PostList.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","getUsers","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","fetch","concat","then","response","json","stop","apply","this","arguments","getUser","_ref2","_callee2","userId","_context2","_x","getPosts","_ref3","_callee3","posts","_context3","sent","filter","post","_x2","getComments","_ref4","_callee4","postId","_context4","_x3","UserList","state","users","list","map","user","react_default","createElement","className","id","key","username","onClick","_this","props","loadPosts","setState","React","Component","User","subData","name","email","address","city","street","Coment","coment","body","CommentList","comments","api_Coment","Post","loaded","prevstate","_this2","title","loadComments","api_CommentList","PostList","filtr","handleSubmit","event","task","refs","textFilter","value","preventDefault","setFilter","target","api_Post","filtred","indexOf","onSubmit","type","placeholder","autoFocus","autoComplete","ref","api_User","App","api_UserList","api_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d33bf61e.chunk.js","sourcesContent":["const BASE_URL = \"https://jsonplaceholder.typicode.com\";\r\n\r\nexport const getUsers = async () => {\r\n  return fetch(`${BASE_URL}/users`).then(response => response.json());\r\n};\r\n\r\nexport const getUser = async userId => {\r\n  return fetch(`${BASE_URL}/users/${userId}`).then(response => response.json());\r\n};\r\n\r\nexport const getPosts = async userId => {\r\n  const posts = await fetch(`${BASE_URL}/posts`).then(response =>\r\n    response.json()\r\n  );\r\n  return posts.filter(post => post.userId === userId);\r\n};\r\n\r\nexport const getComments = async postId => {\r\n  const posts = await fetch(`${BASE_URL}/comments`).then(response =>\r\n    response.json()\r\n  );\r\n  return posts.filter(post => post.postId === postId);\r\n};\r\n","import React from \"react\";\r\nimport { getUsers } from \"./api.js\";\r\n\r\nclass UserList extends React.Component {\r\n  state = {\r\n    users: null\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const users = await getUsers();\r\n\r\n    this.setState({ users: users });\r\n  }\r\n\r\n  list = users =>\r\n    users.map(user => (\r\n      <li className=\"\" id={user.id} key={user.id}>\r\n        <div>{user.username}</div>\r\n        <div>\r\n          <button\r\n            className=\"loadPosts\"\r\n            onClick={() => {\r\n              this.props.loadPosts(user.id);\r\n            }}\r\n          >\r\n            Load User Posts\r\n          </button>\r\n        </div>\r\n      </li>\r\n    ));\r\n\r\n  render() {\r\n    const users = this.state.users;\r\n    return (\r\n      <div>\r\n        <ul className=\"Userlist\">\r\n          {users ? this.list(users) : <h2> Loading... </h2>}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserList;\r\n","import React from \"react\";\r\nimport { getUser } from \"./api.js\";\r\n\r\nclass User extends React.Component {\r\n  state = {\r\n    user: null\r\n  };\r\n\r\n  subData = user => {\r\n    return (\r\n      <ul className=\"user-list\">\r\n        <li>{user.username}</li>\r\n        <li>{user.name}</li>\r\n        <li>{user.email}</li>\r\n        <li>{`${user.address.city} ${user.address.street}`}</li>\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const user = await getUser(this.props.userId);\r\n\r\n    this.setState({ user: user });\r\n  }\r\n\r\n  render() {\r\n    const user = this.state.user;\r\n    return <div>{user ? this.subData(user) : <h2> Loading... </h2>}</div>;\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import React from \"react\";\r\n\r\nclass Coment extends React.Component {\r\n  render() {\r\n    const coment = this.props.coment;\r\n    return (\r\n      <li key={coment.id}>\r\n        <h3>{coment.name}</h3>\r\n        <div>{coment.body}</div>\r\n        <div>{`Autor e-mail: ${coment.email}`}</div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Coment;\r\n","import React from \"react\";\r\nimport Coment from \"./Coment\";\r\n\r\nclass CommentList extends React.Component {\r\n  list = () =>\r\n    this.props.comments.map(coment => (\r\n      <Coment key={coment.id} coment={coment} />\r\n    ));\r\n\r\n  render() {\r\n    const comments = this.props.comments;\r\n    return (\r\n      <div className=\"comments\">\r\n        <ul className=\"comments-list\">\r\n          {comments ? this.list(comments) : <h2> Loading... </h2>}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommentList;\r\n","import React from \"react\";\r\nimport { getComments } from \"./api.js\";\r\nimport CommentList from \"./CommentList\";\r\n\r\nclass Post extends React.Component {\r\n  state = {\r\n    comments: null,\r\n    loaded: false\r\n  };\r\n\r\n  async loadComments(postId) {\r\n    const comments = await getComments(postId);\r\n    this.setState(prevstate => {\r\n      return { comments: comments, loaded: !prevstate.loaded };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const post = this.props.post;\r\n    const comments = this.state.comments;\r\n    return (\r\n      <li key={post.id}>\r\n        <h3>{post.title}</h3>\r\n        <div>{post.body}</div>\r\n        <button\r\n          className=\"loadComents\"\r\n          onClick={() => {\r\n            this.loadComments(post.id);\r\n          }}\r\n        >\r\n          {!this.state.loaded ? \"Show comments\" : \"Hide comments\"}\r\n        </button>\r\n        {this.state.loaded ? <CommentList comments={comments} /> : null}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { getPosts } from \"./api.js\";\r\nimport User from \"./User\";\r\nimport Post from \"./Post\";\r\n\r\nclass PostList extends React.Component {\r\n  state = {\r\n    posts: [],\r\n    filtr: \"\"\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const posts = await getPosts(this.props.userId);\r\n\r\n    this.setState({ posts: posts });\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    let task = this.refs.textFilter.value;\r\n    this.setState({ filtr: task });\r\n    this.refs.textFilter.value = \"\";\r\n    event.preventDefault();\r\n  };\r\n\r\n  setFilter = event => {\r\n    if (event.key === \"Enter\") {\r\n      let task = event.target.value;\r\n      event.target.value = \"\";\r\n      this.setState({ filtr: task });\r\n    }\r\n  };\r\n\r\n  list = posts =>\r\n    posts.map(post => (\r\n      <Post key={post.id} post={post} filtr={this.state.filtr} />\r\n    ));\r\n\r\n  render() {\r\n    const posts = this.state.posts;\r\n    const filtred = posts.filter(\r\n      post =>\r\n        post.title.indexOf(this.state.filtr) !== -1 ||\r\n        post.body.indexOf(this.state.filtr) !== -1\r\n    );\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Input filter text\"\r\n            name=\"inputFilter\"\r\n            autoFocus=\"\"\r\n            autoComplete=\"off\"\r\n            ref={\"textFilter\"}\r\n          />\r\n        </form>\r\n        {this.state.filtr !== \"\" ? (\r\n          <div>{`You find posts with: ${this.state.filtr} `}</div>\r\n        ) : null}\r\n        <div className=\"main\">\r\n          <User userId={this.props.userId} />\r\n          <ul className=\"post-list\">\r\n            {posts ? this.list(filtred) : <h2> Loading... </h2>}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport UserList from \"./api/UserList\";\nimport PostList from \"./api/PostList\";\n\nclass App extends React.Component {\n  state = {\n    userId: null\n  };\n\n  loadPosts = id => this.setState({ userId: id });\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <UserList loadPosts={this.loadPosts} />\n        </header>\n        <div className=\"main\">\n          {this.state.userId ? (\n            <PostList key={this.state.userId} userId={this.state.userId} />\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}